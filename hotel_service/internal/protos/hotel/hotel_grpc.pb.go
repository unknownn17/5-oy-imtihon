// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: hotel.proto

package hotel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hotel_CreateHotel_FullMethodName = "/Hotel/CreateHotel"
	Hotel_GetHotel_FullMethodName    = "/Hotel/GetHotel"
	Hotel_Gets_FullMethodName        = "/Hotel/Gets"
	Hotel_Update_FullMethodName      = "/Hotel/Update"
	Hotel_Delte_FullMethodName       = "/Hotel/Delte"
	Hotel_CreateRoom_FullMethodName  = "/Hotel/CreateRoom"
	Hotel_Get_FullMethodName         = "/Hotel/Get"
	Hotel_GetRooms_FullMethodName    = "/Hotel/GetRooms"
	Hotel_UpdateRoom_FullMethodName  = "/Hotel/UpdateRoom"
	Hotel_DeleteRoom_FullMethodName  = "/Hotel/DeleteRoom"
)

// HotelClient is the client API for Hotel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelClient interface {
	CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	GetHotel(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GetHotelResponse, error)
	Gets(ctx context.Context, in *GetsRequest, opts ...grpc.CallOption) (*GetsResponse, error)
	Update(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	Delte(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	Get(ctx context.Context, in *GetroomRequest, opts ...grpc.CallOption) (*UpdateRoomRequest, error)
	GetRooms(ctx context.Context, in *GetroomRequest, opts ...grpc.CallOption) (*GetroomResponse, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
	DeleteRoom(ctx context.Context, in *GetroomRequest, opts ...grpc.CallOption) (*GeneralResponse, error)
}

type hotelClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelClient(cc grpc.ClientConnInterface) HotelClient {
	return &hotelClient{cc}
}

func (c *hotelClient) CreateHotel(ctx context.Context, in *CreateHotelRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, Hotel_CreateHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) GetHotel(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GetHotelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHotelResponse)
	err := c.cc.Invoke(ctx, Hotel_GetHotel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) Gets(ctx context.Context, in *GetsRequest, opts ...grpc.CallOption) (*GetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetsResponse)
	err := c.cc.Invoke(ctx, Hotel_Gets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) Update(ctx context.Context, in *UpdateHotelRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, Hotel_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) Delte(ctx context.Context, in *GetHotelRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, Hotel_Delte_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, Hotel_CreateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) Get(ctx context.Context, in *GetroomRequest, opts ...grpc.CallOption) (*UpdateRoomRequest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRoomRequest)
	err := c.cc.Invoke(ctx, Hotel_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) GetRooms(ctx context.Context, in *GetroomRequest, opts ...grpc.CallOption) (*GetroomResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetroomResponse)
	err := c.cc.Invoke(ctx, Hotel_GetRooms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, Hotel_UpdateRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hotelClient) DeleteRoom(ctx context.Context, in *GetroomRequest, opts ...grpc.CallOption) (*GeneralResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GeneralResponse)
	err := c.cc.Invoke(ctx, Hotel_DeleteRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServer is the server API for Hotel service.
// All implementations must embed UnimplementedHotelServer
// for forward compatibility.
type HotelServer interface {
	CreateHotel(context.Context, *CreateHotelRequest) (*GeneralResponse, error)
	GetHotel(context.Context, *GetHotelRequest) (*GetHotelResponse, error)
	Gets(context.Context, *GetsRequest) (*GetsResponse, error)
	Update(context.Context, *UpdateHotelRequest) (*GeneralResponse, error)
	Delte(context.Context, *GetHotelRequest) (*GeneralResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*GeneralResponse, error)
	Get(context.Context, *GetroomRequest) (*UpdateRoomRequest, error)
	GetRooms(context.Context, *GetroomRequest) (*GetroomResponse, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*GeneralResponse, error)
	DeleteRoom(context.Context, *GetroomRequest) (*GeneralResponse, error)
	mustEmbedUnimplementedHotelServer()
}

// UnimplementedHotelServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHotelServer struct{}

func (UnimplementedHotelServer) CreateHotel(context.Context, *CreateHotelRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHotel not implemented")
}
func (UnimplementedHotelServer) GetHotel(context.Context, *GetHotelRequest) (*GetHotelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHotel not implemented")
}
func (UnimplementedHotelServer) Gets(context.Context, *GetsRequest) (*GetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (UnimplementedHotelServer) Update(context.Context, *UpdateHotelRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedHotelServer) Delte(context.Context, *GetHotelRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delte not implemented")
}
func (UnimplementedHotelServer) CreateRoom(context.Context, *CreateRoomRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedHotelServer) Get(context.Context, *GetroomRequest) (*UpdateRoomRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHotelServer) GetRooms(context.Context, *GetroomRequest) (*GetroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedHotelServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedHotelServer) DeleteRoom(context.Context, *GetroomRequest) (*GeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedHotelServer) mustEmbedUnimplementedHotelServer() {}
func (UnimplementedHotelServer) testEmbeddedByValue()               {}

// UnsafeHotelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServer will
// result in compilation errors.
type UnsafeHotelServer interface {
	mustEmbedUnimplementedHotelServer()
}

func RegisterHotelServer(s grpc.ServiceRegistrar, srv HotelServer) {
	// If the following call pancis, it indicates UnimplementedHotelServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hotel_ServiceDesc, srv)
}

func _Hotel_CreateHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).CreateHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_CreateHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).CreateHotel(ctx, req.(*CreateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_GetHotel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).GetHotel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_GetHotel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).GetHotel(ctx, req.(*GetHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_Gets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).Gets(ctx, req.(*GetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).Update(ctx, req.(*UpdateHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_Delte_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHotelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).Delte(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_Delte_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).Delte(ctx, req.(*GetHotelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_CreateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).Get(ctx, req.(*GetroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_GetRooms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).GetRooms(ctx, req.(*GetroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_UpdateRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hotel_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hotel_DeleteRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServer).DeleteRoom(ctx, req.(*GetroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hotel_ServiceDesc is the grpc.ServiceDesc for Hotel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hotel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Hotel",
	HandlerType: (*HotelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHotel",
			Handler:    _Hotel_CreateHotel_Handler,
		},
		{
			MethodName: "GetHotel",
			Handler:    _Hotel_GetHotel_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _Hotel_Gets_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Hotel_Update_Handler,
		},
		{
			MethodName: "Delte",
			Handler:    _Hotel_Delte_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Hotel_CreateRoom_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Hotel_Get_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _Hotel_GetRooms_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _Hotel_UpdateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Hotel_DeleteRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel.proto",
}
